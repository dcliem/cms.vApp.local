<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Community</name>
    </assembly>
    <members>
        <member name="T:CMS.Community.CommunityModule">
            <summary>
            Module registration.
            </summary>
        </member>
        <member name="M:CMS.Community.CommunityModule.#ctor(CMS.SettingsProvider.ModuleInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Module info</param>
        </member>
        <member name="M:CMS.Community.CommunityModule.GetObject(System.Data.DataRow,System.String)">
            <summary>
            Gets the object created from the given DataRow.
            </summary>
            <param name="objectRow">Object DataRow</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.Community.CommunityModule.ProcessCommand(System.String,System.Object[])">
            <summary>
            Processes the specified command.
            </summary>
            <param name="commandName">Command name</param>
            <param name="parameters">Command parameters</param>
        </member>
        <member name="M:CMS.Community.CommunityModule.GetContexts">
            <summary>
            Returns the hashtable of the module contexts. [name.ToLower()] -> [AbstractContext]
            </summary>
        </member>
        <member name="T:CMS.Community.FriendsDataSource">
            <summary>
            Friends data source server control.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendsDataSource.OnInit(System.EventArgs)">
            <summary>
            OnInit override, register OnFilter change event.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendsDataSource.DataFilter_OnFilterChanged">
            <summary>
            OnFilterChange handler.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendsDataSource.GetDataSourceFromDB">
            <summary>
            Gets data source from DB.
            </summary>
            <returns>Dataset as object</returns>
        </member>
        <member name="M:CMS.Community.FriendsDataSource.GetDefaultCacheDependendencies">
            <summary>
            Gets the default cache dependencies for the data source.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendsDataSource.UserID">
            <summary>
            Gets or sets UserID for which friends should be loaded.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendsDataSource.FriendStatus">
            <summary>
            Gets or sets friend status condition.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendsDataSource.DataSource">
            <summary>
            Gets Datasource object.
            </summary>
        </member>
        <member name="T:CMS.Community.FriendInfo">
            <summary>
            FriendInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Community.FriendInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendInfo.CheckPermissions(CMS.SettingsProvider.PermissionsEnum,System.String,CMS.SettingsProvider.IUserInfo)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
        </member>
        <member name="M:CMS.Community.FriendInfo.#ctor">
            <summary>
            Constructor - Creates an empty FriendInfo object.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new FriendInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendInfo.FriendUserID">
            <summary>
            ID of requesting user.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendInfo.FriendRequestedUserID">
            <summary>
            ID of user being requested.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendInfo.FriendID">
            <summary>
            ID of friendship.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendInfo.FriendApprovedBy">
            <summary>
            Friendship approved by.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendInfo.FriendRejectedBy">
            <summary>
            Friendship rejected by.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendInfo.FriendGUID">
            <summary>
            GUID of friendship.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendInfo.FriendRequestedWhen">
            <summary>
            Friend Requested When.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendInfo.FriendRejectedWhen">
            <summary>
            Friend Rejected When.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendInfo.FriendApprovedWhen">
            <summary>
            Friend Approved When.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendInfo.FriendComment">
            <summary>
            Comment of friendship.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendInfo.FriendStatus">
            <summary>
            Friendship status.
            </summary>
        </member>
        <member name="F:CMS.Community.FriendListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendListInfo.#ctor">
            <summary>
            Constructor - Creates an empty FriendListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new FriendListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Community.FriendListInfo.GetData(CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result (not applied)</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>       
        </member>
        <member name="T:CMS.Community.FriendInfoProvider">
            <summary>
            Class providing FriendInfo management.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetFriendInfo(System.Int32)">
            <summary>
            Returns the FriendInfo structure for the specified friend.
            </summary>
            <param name="friendId">Friend id</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetFriendInfo(System.Guid)">
            <summary>
            Returns the FriendInfo structure specified by GUID.
            </summary>
            <param name="guid">GUID of FriendInfo</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetFriendInfo(System.Int32,System.Int32)">
            <summary>
            Returns the FriendInfo structure for the specified users.
            </summary>
            <param name="userId">User id</param>
            <param name="requestedUserId">Requested user id</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.SetFriendInfo(CMS.Community.FriendInfo)">
            <summary>
            Sets (updates or inserts) specified friend.
            </summary>
            <param name="friend">Friend to set</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.SetFriendInfo(CMS.Community.FriendInfo,System.Boolean)">
            <summary>
            Sets (updates or inserts) specified friend.
            </summary>
            <param name="friend">Friend to set</param>
            <param name="updateCurrentUser">Update current user friends hashtable</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.DeleteFriendInfo(CMS.Community.FriendInfo)">
            <summary>
            Deletes specified friend.
            </summary>
            <param name="friend">Friend object</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.DeleteFriendInfo(CMS.Community.FriendInfo,System.Boolean)">
            <summary>
            Deletes specified friend.
            </summary>
            <param name="friend">Friend object</param>
            <param name="updateCurrentUser">Update current user friends hashtable</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.DeleteFriendInfo(System.Int32)">
            <summary>
            Deletes specified friend.
            </summary>
            <param name="friendId">Friend id</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetFriends(System.String,System.String)">
            <summary>
            Gets all friends filtered out by where condition and ordered by given expresion.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <returns>DataSet with friends.</returns>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetFriends(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets all friends filtered out by where condition and ordered by given expresion.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
            <returns>DataSet with friends.</returns>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetUserFriendshipRelations(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Gets all user friendship relations.
            </summary>
            <param name="userId">ID of user</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
            <returns>DataSet with friends.</returns>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetFullUserFriends(System.Int32)">
            <summary>
            Gets strictly friends for given user with full user information.
            </summary>
            <param name="userId">ID of user</param>
            <returns>DataSet with friends.</returns>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetApprovedUserFriends(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets strictly friends for given user with full user information.
            </summary>
            <param name="userId">ID of user</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetFullFriendsForApproval(System.Int32)">
            <summary>
            Gets all friendship requests for given user with full user information.
            </summary>
            <param name="userId">ID of user</param>
            <returns>DataSet with friends ready for approval.</returns>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetFullFriendsForApproval(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets all friendship requests for given user with full user information.
            </summary>
            <param name="userId">ID of user</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetFullRejectedFriends(System.Int32)">
            <summary>
            Gets all rejected friendship requests for given user with full user information.
            </summary>
            <param name="userId">ID of user</param>
            <returns>DataSet with rejected friends.</returns>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetFullRejectedFriends(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets all rejected friendship requests for given user with full user information.
            </summary>
            <param name="userId">ID of user</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetRequestedFriends(System.Int32)">
            <summary>
            Gets requested friendships by user (nonapproved, rejected).
            </summary>
            <param name="userId">ID of user</param>
            <returns>DataSet with requested friendships.</returns>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetRequestedFriends(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets requested friendships by user (nonapproved, rejected).
            </summary>
            <param name="userId">ID of user</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.FriendshipExists(System.Int32,System.Int32)">
            <summary>
            Determines strictly whether friendship relation exists.
            </summary>
            <param name="userId">User requesting friendship</param>
            <param name="requestedUserId">User participating in friendship</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.GetFullUserFriends(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns DataSet with all user's friends with user data based on where condition.
            </summary>
            <param name="userId">ID of user</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
        </member>
        <member name="M:CMS.Community.FriendInfoProvider.UpdateUserStatus(CMS.Community.FriendInfo)">
            <summary>
            Update user status.
            </summary>
            <param name="friend">Friend info</param>
        </member>
        <member name="T:CMS.Community.FriendsActionControl">
            <summary>
            Summary description for FriendsActionControl.
            </summary>
        </member>
        <member name="F:CMS.Community.FriendsActionControl.currentUser">
            <summary>
            Current user.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendsActionControl.PerformAction(CMS.Community.FriendsActionEnum)">
            <summary>
            Performes selected action based on parameter.
            </summary>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:CMS.Community.FriendsActionControl.CanApprove">
            <summary>
            Indicates if current user can automatically approve friendship.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendsActionControl.GetFormattedUserName(System.String,System.String,System.String)">
            <summary>
            Virtual method for get formatted user name.
            Override if you want to format sender and recipients usernames.
            </summary>
        </member>
        <member name="M:CMS.Community.FriendsActionControl.OnLoad(System.EventArgs)">
            <summary>
            OnLoad event.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:CMS.Community.FriendsActionControl.AutomaticApprovment">
            <summary>
            Indicates if automatic approvment should be performed.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendsActionControl.SelectedFriends">
            <summary>
            Gets and sets selectedFriends.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendsActionControl.UserID">
            <summary>
            Gets and sets User ID.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendsActionControl.RequestedUserID">
            <summary>
            Gets and sets Requested User ID.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendsActionControl.SendMail">
            <summary>
            Gets and sets whether to send mail.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendsActionControl.SendMessage">
            <summary>
            Gets and sets whether to send message.
            </summary>
        </member>
        <member name="P:CMS.Community.FriendsActionControl.Comment">
            <summary>
            Gets and sets action comment.
            </summary>
        </member>
        <member name="T:CMS.Community.GroupApproveMembersEnum">
            <summary>
            Group members approve enumeration.
            </summary>
        </member>
        <member name="F:CMS.Community.GroupApproveMembersEnum.AnyoneCanJoin">
            <summary>
            Any site member can join.
            </summary>
        </member>
        <member name="F:CMS.Community.GroupApproveMembersEnum.ApprovedCanJoin">
            <summary>
            Only approved members can join.
            </summary>
        </member>
        <member name="F:CMS.Community.GroupApproveMembersEnum.InvitedWithoutApproval">
            <summary>
            Invited members can join without approval.
            </summary>
        </member>
        <member name="T:CMS.Community.GroupInfo">
            <summary>
            GroupInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Community.GroupInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupInfo.GetChildObject(System.String)">
            <summary>
            Gets child object info
            </summary>
            <param name="objectType">Child object type</param>
        </member>
        <member name="M:CMS.Community.GroupInfo.#ctor">
            <summary>
            Constructor - Creates an empty GroupInfo object.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new GroupInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupDisplayName">
            <summary>
            Group display name.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupSiteID">
            <summary>
            Group site ID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupName">
            <summary>
            Group name.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupDescription">
            <summary>
            Group description.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupLastModified">
            <summary>
            Group's last modification time.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupAccess">
            <summary>
            Group access
            0 - Anybody can view the content
            1 - Only site members can view the content
            2 - Only specified roles can view the content (reserved)
            3 - Only group members can view the content
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupGUID">
            <summary>
            Group GUID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupApproveMembers">
            <summary>
            Group approve members
            0 - Any site member can join
            1 - Only approved members can join
            2 - Invited members can join without approval
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupNodeGUID">
            <summary>
            GUID of the group's root document.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupCreatedByUserID">
            <summary>
            Group created by user with UserID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupApprovedByUserID">
            <summary>
            Group approved by user with UserID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupAvatarID">
            <summary>
            Group avatar's ID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupApproved">
            <summary>
            Indicates if group has been approved.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupCreatedWhen">
            <summary>
            Group creation time.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupSendJoinLeaveNotification">
            <summary>
            Indicates if join/leave notification should be sent
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupSendWaitingForApprovalNotification">
            <summary>
            Indicates if 'waiting for approval' notification should be sent.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupSecurity">
            <summary>
            Sets group security properties.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.AllowCreate">
            <summary>
            Indicates whether creating group pages is allowed.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.AllowModify">
            <summary>
            Indicates whether editing group pages is allowed.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.AllowDelete">
            <summary>
            Indicates whether the deleting group pages is allowed.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupInfo.GroupLogActivity">
            <summary>
            Indicates if ativity logging is performed for this particular group.
            </summary>
        </member>
        <member name="T:CMS.Community.GroupInfoProvider">
            <summary>
            Class providing GroupInfo management.
            </summary>
        </member>
        <member name="F:CMS.Community.GroupInfoProvider.CURRENT_GROUP">
            <summary>
            Current group.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupInfo(System.Int32)">
            <summary>
            Returns the GroupInfo structure for the specified group.
            </summary>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupInfo(System.Guid)">
            <summary>
            Returns the GroupInfo structure for the specified group.
            </summary>
            <param name="groupGuid">Group GUID</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupInfo(System.String,System.String)">
            <summary>
            Returns the GroupInfo structure for the specified group.
            </summary>
            <param name="groupCodeName">Code name of the group to get</param>     
            <param name="siteName">Group site name</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroups(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns first N records on groups according to the specifed conditions.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty select all columns</param>
            <returns>Data set with records.</returns>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupsManagedByUser(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the dataset of GroupInfo structure managed by user.
            </summary>
            <param name="userId">User ID</param>
            <param name="siteName">Site name</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty select all columns</param>
            <returns>Data set with records.</returns>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupsView(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns first N records on groups according to the specifed conditions from groups view.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty select all columns</param>
            <returns>Data set with records.</returns>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroups(System.String,System.String,System.Int32)">
            <summary>
            Returns first N records on groups according to the specifed conditions.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <returns>Data set with records.</returns>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroups(System.String,System.String)">
            <summary>
            Returns records on groups according to the specifed conditions.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <returns>Data set with records.</returns>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.SetGroupInfo(CMS.Community.GroupInfo)">
            <summary>
            Sets (updates or inserts) specified group.
            </summary>
            <param name="group">Group to set</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.DeleteGroupInfo(CMS.Community.GroupInfo)">
            <summary>
            Deletes specified group including related document.
            </summary>
            <param name="infoObj">Group object</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.DeleteGroupInfo(CMS.Community.GroupInfo,System.Boolean)">
            <summary>
            Deletes specified group including related document if needed.
            </summary>
            <param name="infoObj">Group object</param>
            <param name="deleteRelatedDocument">If true related document is deleted too</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.DeleteGroupInfo(System.Int32)">
            <summary>
            Deletes specified group.
            </summary>
            <param name="groupId">Group id</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupProfilePath(System.String,System.String)">
            <summary>
            Returns group profile path with resolved macros from settings.
            </summary>
            <param name="groupName">Group name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupManagementPath(System.String,System.String)">
            <summary>
            Returns group management path with resolved macros from settings.
            </summary>
            <param name="groupName">Group name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupSecurityAccessPath(System.String,System.String)">
            <summary>
            Returns group security access path with resolved macros from settings.
            </summary>
            <param name="groupName">Group name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetUserGroupsCount(CMS.SiteProvider.UserInfo,CMS.SiteProvider.SiteInfo)">
            <summary>
            Gets number of user groups.
            </summary>
            <param name="userInfo">User info</param>
            <param name="siteInfo">Site info</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.CheckPermission(System.String,System.Int32)">
            <summary>
            Returns true if CurrentUser is authorized for the specified action in the group.
            </summary>
            <param name="permissionName">Name of the permission to check (createpages, editpages, deletepages)</param>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.IsAuthorizedPerGroup(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if the user as a role member has permission for the specified group.
            </summary>
            <param name="groupId">Group ID</param>
            <param name="userId">User ID</param>
            <param name="permissionId">Permission ID</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.CopyGroupDocument(CMS.Community.GroupInfo,System.String,System.String,System.String,System.String,System.Boolean,CMS.SiteProvider.UserInfo,CMS.SiteProvider.RoleInfo)">
            <summary>
            Creates group pages for specified group.
            </summary>
            <param name="gi">Group info object</param>
            <param name="sourcePath">Source template path</param>
            <param name="targetPath">Target template path</param>
            <param name="groupProfileURLPath">URL path to group profile. Macro {groupname} is automatically resolved to current group</param>
            <param name="culture">Documentt culture</param>
            <param name="combineWithDefaultCulture">Combine with default culture</param>
            <param name="user">User info</param>
            <param name="ri">Role info</param>
            <returns>Returns error message if this method failed. Otherwise return empty string.</returns>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupInfoInternal(System.Int32)">
            <summary>
            Returns the GroupInfo structure for the specified group.
            </summary>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupInfoInternal(System.Guid)">
            <summary>
            Returns the GroupInfo structure for the specified group.
            </summary>
            <param name="groupGuid">Group GUID</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupInfoInternal(System.String,System.String)">
            <summary>
            Returns the GroupInfo structure for the specified group.
            </summary>
            <param name="groupCodeName">Code name of the group to get</param>
            <param name="siteName">Group site name</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupsInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns first N records on groups according to the specifed conditions.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty select all columns</param>
            <returns>Data set with records.</returns>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupsManagedByUserInternal(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the dataset of GroupInfo structure managed by user.
            </summary>
            <param name="userId">User ID</param>
            <param name="siteName">Site name</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty select all columns</param>
            <returns>Data set with records.</returns>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetGroupsViewInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns first N records on groups according to the specifed conditions from groups view.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty select all columns</param>
            <returns>Data set with records.</returns>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.SetGroupInfoInternal(CMS.Community.GroupInfo)">
            <summary>
            Sets (updates or inserts) specified group.
            </summary>
            <param name="group">Group to set</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.DeleteGroupInfoInternal(CMS.Community.GroupInfo,System.Boolean)">
            <summary>
            Deletes specified group including related document if needed.
            </summary>
            <param name="infoObj">Group object</param>
            <param name="deleteRelatedDocument">If true related document is deleted too</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.GetUserGroupsCountInternal(CMS.SiteProvider.UserInfo,CMS.SiteProvider.SiteInfo)">
            <summary>
            Gets number of user groups.
            </summary>
            <param name="userInfo">User info</param>
            <param name="siteInfo">Site info</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.IsAuthorizedPerGroupInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if the user as a role member has permission for the specified group.
            </summary>
            <param name="groupId">Group ID</param>
            <param name="userId">User ID</param>
            <param name="permissionId">Permission ID</param>
        </member>
        <member name="M:CMS.Community.GroupInfoProvider.CopyGroupDocumentInternal(CMS.Community.GroupInfo,System.String,System.String,System.String,System.String,System.Boolean,CMS.SiteProvider.UserInfo,CMS.SiteProvider.RoleInfo)">
            <summary>
            Creates group pages for specified group.
            </summary>
            <param name="gi">Group info object</param>
            <param name="sourcePath">Source template path</param>
            <param name="targetPath">Target template path</param>
            <param name="groupProfileURLPath">URL path to group profile. Macro {groupname} is automatically resolved to current group</param>
            <param name="culture">Documentt culture</param>
            <param name="combineWithDefaultCulture">Combine with default culture</param>
            <param name="user">User info</param>
            <param name="ri">Role info</param>
            <returns>Returns error message if this method failed. Otherwise return empty string.</returns>
        </member>
        <member name="F:CMS.Community.GroupMemberListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupMemberListInfo.#ctor">
            <summary>
            Constructor - Creates an empty GroupMemberListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupMemberListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new GroupMemberListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Community.GroupMemberListInfo.GetData(CMS.SettingsProvider.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>        
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result (not applied)</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>       
        </member>
        <member name="T:CMS.Community.GroupMemberStatus">
            <summary>
            Memebr status enumeration.
            </summary>
        </member>
        <member name="F:CMS.Community.GroupMemberStatus.Approved">
            <summary>
            Member is approved.
            </summary>
        </member>
        <member name="F:CMS.Community.GroupMemberStatus.Rejected">
            <summary>
            Member is rejected.
            </summary>
        </member>
        <member name="F:CMS.Community.GroupMemberStatus.WaitingForApproval">
            <summary>
            Member waiting for approval.
            </summary>
        </member>
        <member name="F:CMS.Community.GroupMemberStatus.GroupAdmin">
            <summary>
            Member is group admin, this status is read only.
            </summary>
        </member>
        <member name="T:CMS.Community.GroupRolePermissionInfo">
            <summary>
            Class providing Group/Role/Permission data.
            </summary>
        </member>
        <member name="F:CMS.Community.GroupRolePermissionInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupRolePermissionInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupRolePermissionInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupRolePermissionInfo.#ctor">
            <summary>
            Constructor - Creates an empty ForumRoleInfo object.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupRolePermissionInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ForumRoleInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupRolePermissionInfo.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupRolePermissionInfo.RoleID">
            <summary>
            Role ID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupRolePermissionInfo.PermissionID">
            <summary>
            Permission ID.
            </summary>
        </member>
        <member name="T:CMS.Community.GroupRolePermissionInfoProvider">
            <summary>
            Class providing GroupRolePermissionInfo management.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupRolePermissionInfoProvider.GetGroupRolePermissionInfo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns GroupRolePermissionInfo for specified group/role/permission.
            </summary>
            <param name="groupId">GroupID</param>
            <param name="roleId">RoleID</param>
            <param name="permissionId">PermissionID</param>
        </member>
        <member name="M:CMS.Community.GroupRolePermissionInfoProvider.GetGroupRolePermissionInfos(System.String,System.String)">
            <summary>
            Gets GroupRolePermissionInfo object specified by where condition.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">OrderBy expression</param>
        </member>
        <member name="M:CMS.Community.GroupRolePermissionInfoProvider.SetGroupRolePermissionInfo(CMS.Community.GroupRolePermissionInfo)">
            <summary>
            Sets (updates or inserts) specified GroupRolePermissionInfo.
            </summary>
            <param name="groupRolePermission">GroupRolePermissionInfo object to set</param>
        </member>
        <member name="M:CMS.Community.GroupRolePermissionInfoProvider.DeleteGroupRolePermissionInfo(CMS.Community.GroupRolePermissionInfo)">
            <summary>
            Deletes specified GroupRolePermissionInfo.
            </summary>
            <param name="infoObj">GroupRolePermissionInfo object</param>
        </member>
        <member name="M:CMS.Community.GroupRolePermissionInfoProvider.RemoveRoleFromGroup(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes role from specified group.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="groupId">GroupID</param>
            <param name="permissionId">PermissionID</param>
        </member>
        <member name="M:CMS.Community.GroupRolePermissionInfoProvider.AddRoleToGroup(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds role to specified group.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="groupId">GroupID</param>
            <param name="permissionId">PermissionID</param>
        </member>
        <member name="M:CMS.Community.GroupRolePermissionInfoProvider.GetPermissionMatrix(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the permission matrix for the specified group.
            </summary>
            <param name="resourceId">ID of the resource matrix</param>
            <param name="siteId">SiteID</param>
            <param name="groupId">GroupID</param>
        </member>
        <member name="T:CMS.Community.InvitationInfo">
            <summary>
            InvitationInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Community.InvitationInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Community.InvitationInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Community.InvitationInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Community.InvitationInfo.#ctor">
            <summary>
            Constructor - Creates an empty InvitationInfo object.
            </summary>
        </member>
        <member name="M:CMS.Community.InvitationInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new InvitationInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Community.InvitationInfo.InvitationCreated">
            <summary>
            Invitation created.
            </summary>
        </member>
        <member name="P:CMS.Community.InvitationInfo.InvitationID">
            <summary>
            Invitation ID.
            </summary>
        </member>
        <member name="P:CMS.Community.InvitationInfo.InvitationGroupID">
            <summary>
            Invitation group ID.
            </summary>
        </member>
        <member name="P:CMS.Community.InvitationInfo.InvitationLastModified">
            <summary>
            Invitation last modified.
            </summary>
        </member>
        <member name="P:CMS.Community.InvitationInfo.InvitationGUID">
            <summary>
            Invitation GUID.
            </summary>
        </member>
        <member name="P:CMS.Community.InvitationInfo.InvitationComment">
            <summary>
            Invitation comment.
            </summary>
        </member>
        <member name="P:CMS.Community.InvitationInfo.InvitedByUserID">
            <summary>
            Invited by user ID.
            </summary>
        </member>
        <member name="P:CMS.Community.InvitationInfo.InvitationValidTo">
            <summary>
            Invitation valid to.
            </summary>
        </member>
        <member name="P:CMS.Community.InvitationInfo.InvitedUserID">
            <summary>
            Invited user ID.
            </summary>
        </member>
        <member name="P:CMS.Community.InvitationInfo.InvitationUserEmail">
            <summary>
            Invitation user e-mail.
            </summary>
        </member>
        <member name="T:CMS.Community.InvitationInfoProvider">
            <summary>
            Class providing InvitationInfo management.
            </summary>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.GetInvitationInfo(System.Int32)">
            <summary>
            Returns the InvitationInfo structure for the specified Invitation.
            </summary>
            <param name="invitationId">Invitation id</param>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.GetInvitationInfo(System.Guid)">
            <summary>
            Returns the InvitationInfo structure specified by GUID.
            </summary>
            <param name="guid">GUID of InvitationInfo</param>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.SetInvitationInfo(CMS.Community.InvitationInfo)">
            <summary>
            Sets (updates or inserts) specified invitation.
            </summary>
            <param name="invitation">Invitation to set</param>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.DeleteInvitationInfo(CMS.Community.InvitationInfo)">
            <summary>
            Deletes specified invitation.
            </summary>
            <param name="infoObj">Invitation object</param>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.DeleteInvitationInfo(System.Int32)">
            <summary>
            Deletes specified invitation.
            </summary>
            <param name="invitationId">Invitation id</param>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.DeleteInvitations(System.String)">
            <summary>
            Deletes invitations based on where condition.
            </summary>
            <param name="whereCondition">Where condition</param>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.GetInvitations(System.String,System.String,System.Int32)">
            <summary>
            Gets invitations specified by parameters.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Get top N rows</param>
            <returns>DataSet with invitations</returns>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.GetMyInvitations(System.String,System.String)">
            <summary>
            Gets my invitations with group and user data.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <returns>DataSet with invitations</returns>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.GetMySentInvitations(System.String,System.String)">
            <summary>
            Gets sent invitations with group and user data.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <returns>DataSet with sent invitations</returns>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.InvitationExists(System.Int32,System.Int32)">
            <summary>
            Determines whether invitation exists.
            </summary>
            <param name="invitedUserId">ID of invited user</param>
            <param name="groupId">ID of group</param>
            <returns>True if invitation exists.</returns>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.SendInvitationEmail(CMS.Community.InvitationInfo,System.String)">
            <summary>
            Send information email to the invited user.
            One of recipient or recipientEmail must be specified.
            </summary>
            <param name="invitation">Infitation info</param>
            <param name="siteName">Name of site</param>
        </member>
        <member name="M:CMS.Community.InvitationInfoProvider.GetAcceptationUrl(System.Guid,System.String)">
            <summary>
             Gets absolute URL for accepting invitation
            </summary>
            <param name="invitationGUID">GUID of invitation to accept</param>
            <param name="siteName">Name of site</param>
        </member>
        <member name="T:CMS.Community.GroupMemberInfo">
            <summary>
            GroupMemberInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Community.GroupMemberInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupMemberInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupMemberInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupMemberInfo.UpdateData">
            <summary>
            Updates the object.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupMemberInfo.InsertData">
            <summary>
            Inserts the object.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupMemberInfo.DeleteData(System.Boolean)">
            <summary>
            Deletes the object.
            </summary>
            <param name="logObjectChange">Indicates if the object change should be logged</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfo.#ctor">
            <summary>
            Constructor - Creates an empty GroupMemberInfo object.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupMemberInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new GroupMemberInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupMemberInfo.MemberStatus">
            <summary>
            Member status.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupMemberInfo.MemberJoined">
            <summary>
            Date when member joined.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupMemberInfo.MemberGroupID">
            <summary>
            Member group ID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupMemberInfo.MemberID">
            <summary>
            Member ID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupMemberInfo.MemberApprovedByUserID">
            <summary>
            Member approved by user with UserID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupMemberInfo.MemberGUID">
            <summary>
            Member GUID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupMemberInfo.MemberUserID">
            <summary>
            Member UserID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupMemberInfo.MemberInvitedByUserID">
            <summary>
            Member invited by user with UserID.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupMemberInfo.MemberApprovedWhen">
            <summary>
            Date when member was approved.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupMemberInfo.MemberRejectedWhen">
            <summary>
            Date when member is approved.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupMemberInfo.MemberComment">
            <summary>
            Member comment.
            </summary>
        </member>
        <member name="T:CMS.Community.GroupMemberInfoProvider">
            <summary>
            Class providing GroupMemberInfo management.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetGroupMemberInfo(System.Int32)">
            <summary>
            Returns the GroupMemberInfo structure for the specified groupMember.
            </summary>
            <param name="groupMemberId">GroupMember id</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetGroupMembers(System.String,System.String,System.Int32)">
            <summary>
            Returns first N records on group members according to the specifed conditions.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <returns>Data set with records.</returns>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetGroupMembers(System.String,System.String)">
            <summary>
            Returns records on group members according to the specifed conditions.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <returns>Data set with records.</returns>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetGroupMembers(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns first N records on group members according to the specifed conditions.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>        
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetCompleteSiteMembers(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns records with information about members with complete user and site info.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.IsMemberOfGroup(System.Int32,System.Int32)">
            <summary>
            Indicates whether the specified user is member of the specified group.
            </summary>
            <param name="userId">ID of the user to check</param>
            <param name="groupId">ID of the group to check</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetGroupMemberInfo(System.Int32,System.Int32)">
            <summary>
            Returns GroupInfo structure specified by userdId and groupId.
            </summary>
            <param name="userId">ID of user</param>
            <param name="groupId">ID of group</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.SetGroupMemberInfo(CMS.Community.GroupMemberInfo)">
            <summary>
            Sets (updates or inserts) specified groupMember.
            </summary>
            <param name="groupMember">GroupMember to set</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.DeleteGroupMemberInfo(CMS.Community.GroupMemberInfo)">
            <summary>
            Deletes specified groupMember.
            </summary>
            <param name="infoObj">GroupMember object</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.DeleteGroupMemberInfo(System.Int32)">
            <summary>
            Deletes specified groupMember.
            </summary>
            <param name="groupMemberId">GroupMember id</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.SendNotificationMail(System.String,System.String,CMS.Community.GroupMemberInfo,System.Boolean)">
            <summary>
            Sends group notification.
            </summary>
            <param name="templateName">Email template name</param>
            <param name="siteName">Site name</param>
            <param name="memberInfo">Group member object</param>
            <param name="sendToAdmin">True if send to admin, false if send to user</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetAdminsMails(System.Int32)">
            <summary>
            Returns administrators emails.
            </summary>
            <param name="groupID">Group ID</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.CreateMacroResolver(CMS.Community.GroupMemberInfo)">
            <summary>
            Creates macro resolver.
            </summary>
            <param name="memberInfo">Group member object</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetMemberProfilePath(System.String,System.String)">
            <summary>
            Returns member profile path with resolved macros from settings.
            </summary>
            <param name="memberName">Member name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetMemberManagementPath(System.String,System.String)">
            <summary>
            Returns member management path with resolved macros from settings.
            </summary>
            <param name="memberName">Member name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetGroupMemberInfoInternal(System.Int32)">
            <summary>
            Returns the GroupMemberInfo structure for the specified groupMember.
            </summary>
            <param name="groupMemberId">GroupMember id</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetGroupMembersInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns first N records on group members according to the specifed conditions.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>        
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetCompleteSiteMembersInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns records with information about members with complete user and site info.
            </summary>
            <param name="where">Where condition to apply</param>
            <param name="orderBy">Order by statement used to sort the data</param>
            <param name="topN">Number of records to return</param>
            <param name="columns">Columns to select, null or empty returns all columns</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.IsMemberOfGroupInternal(System.Int32,System.Int32)">
            <summary>
            Indicates whether the specified user is member of the specified group.
            </summary>
            <param name="userId">ID of the user to check</param>
            <param name="groupId">ID of the group to check</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.GetGroupMemberInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns GroupInfo structure specified by userdId and groupId.
            </summary>
            <param name="userId">ID of user</param>
            <param name="groupId">ID of group</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.SetGroupMemberInfoInternal(CMS.Community.GroupMemberInfo)">
            <summary>
            Sets (updates or inserts) specified groupMember.
            </summary>
            <param name="groupMember">GroupMember to set</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.DeleteGroupMemberInfoInternal(CMS.Community.GroupMemberInfo)">
            <summary>
            Deletes specified groupMember.
            </summary>
            <param name="infoObj">GroupMember object</param>
        </member>
        <member name="M:CMS.Community.GroupMemberInfoProvider.RemoveObjectDependencies(CMS.Community.GroupMemberInfo)">
            <summary>
            Removes object dependencies.
            </summary>
            <param name="infoObj">Object for which the dependencies should be removed</param>
        </member>
        <member name="T:CMS.Community.CommunityObjectType">
            <summary>
            Community object type constants.
            </summary>
        </member>
        <member name="F:CMS.Community.CommunityObjectType.GROUP">
            <summary>
            Code name for general group.
            </summary>
        </member>
        <member name="F:CMS.Community.CommunityObjectType.GROUPMEMBER">
            <summary>
            Code name of group member class.
            </summary>
        </member>
        <member name="F:CMS.Community.CommunityObjectType.GROUPMEMBERLIST">
            <summary>
            Code name of group member list class.
            </summary>
        </member>
        <member name="F:CMS.Community.CommunityObjectType.FRIEND">
            <summary>
            Code name of friends.
            </summary>
        </member>
        <member name="F:CMS.Community.CommunityObjectType.FRIENDLIST">
            <summary>
            Code name of friend list.
            </summary>
        </member>
        <member name="F:CMS.Community.CommunityObjectType.INVITATION">
            <summary>
            Code name of invitations.
            </summary>
        </member>
        <member name="F:CMS.Community.CommunityObjectType.GROUPROLEPERMISSION">
            <summary>
            Code name of group/role/permissions.
            </summary>
        </member>
        <member name="M:CMS.Community.CommunityObjectType.GetObject(System.Data.DataRow,System.String)">
            <summary>
            Gets the object created from the given DataRow.
            </summary>
            <param name="objectRow">Object DataRow</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="T:CMS.Community.GroupsDataSource">
            <summary>
            Groups data source server control.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupsDataSource.OnInit(System.EventArgs)">
            <summary>
            OnInit override, register OnFilter change event.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupsDataSource.DataFilter_OnFilterChanged">
            <summary>
            OnFilterChange handler.
            </summary>
        </member>
        <member name="M:CMS.Community.GroupsDataSource.GetDataSourceFromDB">
            <summary>
            Gets datasource from DB.
            </summary>
            <returns>Dataset as object</returns>
        </member>
        <member name="M:CMS.Community.GroupsDataSource.GetDefaultCacheDependendencies">
            <summary>
            Gets the default cache dependencies for the data source.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupsDataSource.SelectOnlyApproved">
            <summary>
            Gets or sets Select only approved condition.
            </summary>
        </member>
        <member name="P:CMS.Community.GroupsDataSource.DataSource">
            <summary>
            Gets Datasource object.
            </summary>
        </member>
        <member name="T:CMS.Community.MembersDataSource">
            <summary>
            Members data source server control.
            </summary>
        </member>
        <member name="M:CMS.Community.MembersDataSource.OnInit(System.EventArgs)">
            <summary>
            OnInit override, register OnFilter change event.
            </summary>
        </member>
        <member name="M:CMS.Community.MembersDataSource.DataFilter_OnFilterChanged">
            <summary>
            OnFilterChange handler.
            </summary>
        </member>
        <member name="M:CMS.Community.MembersDataSource.GetDataSourceFromDB">
            <summary>
            Gets datasource from DB.
            </summary>
            <returns>Dataset as object</returns>
        </member>
        <member name="M:CMS.Community.MembersDataSource.GetDefaultCacheKey">
            <summary>
            Gets the default cache key.
            </summary>
        </member>
        <member name="M:CMS.Community.MembersDataSource.GetDefaultCacheDependendencies">
            <summary>
            Gets the default cache dependencies for the data source.
            </summary>
        </member>
        <member name="P:CMS.Community.MembersDataSource.SelectOnlyApproved">
            <summary>
            Gets or sets select only approved property.
            </summary>
        </member>
        <member name="P:CMS.Community.MembersDataSource.GroupName">
            <summary>
            Gets or sets group name to specify group members.
            </summary>
        </member>
        <member name="P:CMS.Community.MembersDataSource.DataSource">
            <summary>
            Gets Datasource object.
            </summary>
        </member>
        <member name="T:CMS.Community.CommunityContext">
            <summary>
            Site related context methods and variables.
            </summary>
        </member>
        <member name="M:CMS.Community.CommunityContext.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:CMS.Community.CommunityContext.GetCurrentGroup">
            <summary>
            Returns information on the current group according the groupid, groupguid or groupname specified as an URL parameter of the current request.
            </summary>        
        </member>
        <member name="M:CMS.Community.CommunityContext.GetCurrentFriend">
            <summary>
            Returns information on the current friend user according the friendship friendid or friendguid specified as an URL parameter of the current request.
            </summary>        
        </member>
        <member name="M:CMS.Community.CommunityContext.GetCurrentFriendship">
            <summary>
            Returns information on the current friendship according the friendship friendid or friendguid specified as an URL parameter of the current request.
            </summary>        
        </member>
        <member name="M:CMS.Community.CommunityContext.GetProperty(System.String)">
            <summary>
            Gets the context property.
            </summary>
            <param name="name">Property name</param>
        </member>
        <member name="M:CMS.Community.CommunityContext.SetProperty(System.String,System.Object)">
            <summary>
            Sets the context property.
            </summary>
            <param name="name">Property name</param>
            <param name="value">New value</param>
        </member>
        <member name="P:CMS.Community.CommunityContext.ContextObject">
            <summary>
            Context object.
            </summary>
        </member>
        <member name="P:CMS.Community.CommunityContext.Properties">
            <summary>
            Properties available through the context.
            </summary>
        </member>
        <member name="P:CMS.Community.CommunityContext.CurrentGroup">
            <summary>
            Current group info object matching groupid, groupguid or groupname specified in the URL parameter of the current request.
            </summary>
        </member>
        <member name="P:CMS.Community.CommunityContext.CurrentFriend">
            <summary>
            Current friend - user info object from friend info object matching friendship friendid or friendguid specified in the URL parameter of the current request.
            </summary>
        </member>
        <member name="P:CMS.Community.CommunityContext.CurrentFriendship">
            <summary>
            Current friendship - friend info object matching friendship friendid or friendguid specified in the URL parameter of the current request.
            </summary>
        </member>
        <member name="T:CMS.Community.FriendsActionEnum">
            <summary>
            Friends action enumeration.
            </summary>
        </member>
        <member name="F:CMS.Community.FriendsActionEnum.Request">
            <summary>
            Request friendship.
            </summary>
        </member>
        <member name="F:CMS.Community.FriendsActionEnum.Approve">
            <summary>
            Approve friendship.
            </summary>
        </member>
        <member name="F:CMS.Community.FriendsActionEnum.Reject">
            <summary>
            Reject friendship.
            </summary>
        </member>
    </members>
</doc>
