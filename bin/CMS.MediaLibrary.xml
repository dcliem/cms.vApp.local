<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.MediaLibrary</name>
    </assembly>
    <members>
        <member name="T:CMS.MediaLibrary.CMSOutputMediaFile">
            <summary>
            Class encapsulating MediaFile.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.CMSOutputMediaFile.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.CMSOutputMediaFile.#ctor(CMS.MediaLibrary.MediaFileInfo,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="mi">MediaFile info</param>
            <param name="data">Output file data</param>
        </member>
        <member name="M:CMS.MediaLibrary.CMSOutputMediaFile.EnsureData(System.Byte[])">
            <summary>
            Ensures that the object contains the output data.
            </summary>
            <param name="defaultData">Default data which should be loaded if data required</param>
            <returns>Returns true if new data has been loaded</returns>
        </member>
        <member name="M:CMS.MediaLibrary.CMSOutputMediaFile.LoadData">
            <summary>
            Loads the data to the object.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.CMSOutputMediaFile.LoadPreview">
            <summary>
            Loads the preview data to the object.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.CMSOutputMediaFile.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.MediaLibrary.CMSOutputMediaFile.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MediaLibrary.CMSOutputMediaFile.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.MediaLibrary.CMSOutputMediaFile.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.UseWatermark">
            <summary>
            If true, the watermark is allowed to be used.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.MediaFile">
            <summary>
            Media file info object.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.LastModified">
            <summary>
            Time when the file was last modified.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.UsePreview">
            <summary>
            Indicates if file preview shoul be pused for output file.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.SiteName">
            <summary>
            Media file site name.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.MimeType">
            <summary>
            Mime type.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.FileName">
            <summary>
            File extension.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.FileExtension">
            <summary>
            File extension.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.FilePath">
            <summary>
            File path.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.PhysicalFile">
            <summary>
            Physical file path to the data.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.OriginalFile">
            <summary>
            Gets physical file path to the original file.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.MediaLibrary.CMSOutputMediaFile.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.FolderTaskWorker">
            <summary>
            Class for asynchronous folder tasks logging.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.FolderTaskWorker.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.FolderTaskWorker.Run">
            <summary>
            Runs the action.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.FolderTaskWorker.GetDuplicityKey">
            <summary>
            Gets the duplicity key for the worker to eliminate duplicit queued workers.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTaskWorker.SiteName">
            <summary>
            Site name (optional).
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTaskWorker.SourceFolder">
            <summary>
            Source folder.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTaskWorker.TargetFolder">
            <summary>
            Target folder (optional).
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTaskWorker.LibraryId">
            <summary>
            Library ID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTaskWorker.ServerId">
            <summary>
            Server ID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTaskWorker.TaskType">
            <summary>
            Type of the task.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.FolderTree">
            <summary>
            Class providing basic variables and properties.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.RootFolderPath">
            <summary>
            Root folder path in file system.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.ImageFolderPath">
            <summary>
            Path to the trees images.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.SelectedPath">
            <summary>
            Selected path in treeview.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.ExpandPath">
            <summary>
            Expand path in treeview.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.MediaLibraryFolder">
            <summary>
            Media library folder in root of treeview.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.MediaLibraryPath">
            <summary>
            Media library path for root of tree within library.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.FileIDQueryStringKey">
            <summary>
            Gets or sets the file id querystring parameter.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.PathQueryStringKey">
            <summary>
            Gets or sets the path querystring parameter.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.FilterMethod">
            <summary>
            Gets or sets the filter method.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.ShowSubfoldersContent">
            <summary>
            Indicates if subfolders content should be displayed.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.DisplayFileCount">
            <summary>
            Indicates if file count in directory should be displayed in folder tree.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.CurrentFolder">
            <summary>
            Current folder in library.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.FolderTree.Where">
            <summary>
            Where condition.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaFileURLProvider">
            <summary>
            URL provider for the media files.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileURLProvider.GetMediaFileUrl(CMS.MediaLibrary.MediaFileInfo,System.String,System.String)">
            <summary>
            Returns relative URL path to the media file, user permissions are not checked.
            </summary>
            <param name="fileInfo">Media file info object</param>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileURLProvider.GetMediaFileUrl(System.String,System.String,System.String)">
            <summary>
            Returns relative URL path to the media file, user permissions are not checked.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder name</param>
            <param name="filePath">File path within the library folder</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileURLProvider.GetMediaFileUrl(System.Guid,System.String)">
            <summary>
            Returns relative URL path to the media file which is rewritten to calling GetMediaFile.aspx page where user permissions are checked.
            </summary>
            <param name="fileGuid">File GUID</param>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileURLProvider.GetMediaFileAbsoluteUrl(System.String,System.String,System.String)">
            <summary>
            Returns absolute URL path to the media file including http://, user permissions are not checked
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder name</param>
            <param name="filePath">File path within the library folder</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileURLProvider.GetMediaFileAbsoluteUrl(System.String,System.Guid,System.String)">
            <summary>
            Returns absolute URL path to the media file including http:// which is rewritten to calling GetMediaFile.aspx page where user permissions are checked
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileGuid">File GUID</param>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileURLProvider.GetMediaFileAbsoluteUrl(System.Guid,System.String)">
            <summary>
            Returns absolute URL path for current domain to the media file including http:// which is rewritten to calling GetMediaFile.aspx page where user permissions are checked
            </summary>
            <param name="fileGuid">File GUID</param>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileURLProvider.GetWebDAVUrl(System.String,System.String,System.String)">
            <summary>
            Gets media file relative URL for WebDAV.
            </summary>
            <param name="libraryName">Library name</param>
            <param name="filePath">File path</param>
            <param name="groupName">Community group name (optional)</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileURLProvider.GetMediaFileUrlInternal(CMS.MediaLibrary.MediaFileInfo,System.String,System.String,System.String)">
            <summary>
            Returns relative URL path to the media file, user permissions are not checked.
            </summary>
            <param name="fileInfo">Media file info object</param>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder name</param>
            <param name="filePath">File path within the library folder</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileURLProvider.GetMediaFileUrlInternal(System.Guid,System.String)">
            <summary>
            Returns relative URL path to the media file which is rewritten to calling GetMediaFile.aspx page where user permissions are checked.
            </summary>
            <param name="fileGuid">File GUID</param>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileURLProvider.GetMediaFileAbsoluteUrlInternal(System.String,System.String,System.String)">
            <summary>
            Returns absolute URL path to the media file including http://, user permissions are not checked
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder name</param>
            <param name="filePath">File path within the library folder</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileURLProvider.GetMediaFileAbsoluteUrlInternal(System.String,System.Guid,System.String)">
            <summary>
            Returns absolute URL path to the media file including http:// which is rewritten to calling GetMediaFile.aspx page where user permissions are checked
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileGuid">File GUID</param>
            <param name="fileName">File name</param>
        </member>
        <member name="T:CMS.MediaLibrary.MediaLibraryDataSource">
            <summary>
            Media library data source server control.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryDataSource.OnInit(System.EventArgs)">
            <summary>
            OnInit override, register OnFilter change event.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryDataSource.DataFilter_OnFilterChanged">
            <summary>
            OnFilterChange handler.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryDataSource.GetDataSourceFromDB">
            <summary>
            Gets data source from DB.
            </summary>
            <returns>Dataset as object</returns>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryDataSource.GetDefaultCacheDependendencies">
            <summary>
            Gets the default cache dependencies for the data source.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryDataSource.DataSource">
            <summary>
            Gets Datasource object.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryDataSource.GroupID">
            <summary>
            Gets or sets the group ID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryDataSource.ShowGroupLibraries">
            <summary>
            Indicates if the group libraries should be included. (If no group ID is provided.).
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryDataSource.CacheItemName">
            <summary>
            Name of the cache item the control will use.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaFileDataSource">
            <summary>
            Media file data source server control.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileDataSource.OnInit(System.EventArgs)">
            <summary>
            OnInit override, register OnFilter change event.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileDataSource.DataFilter_OnFilterChanged">
            <summary>
            OnFilterChange handler.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileDataSource.GetDataSourceFromDB">
            <summary>
            Gets data source from DB.
            </summary>
            <returns>Dataset as object</returns>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileDataSource.GetDefaultCacheDependendencies">
            <summary>
            Gets the default cache dependencies for the data source.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileDataSource.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileDataSource.FileExtensions">
            <summary>
            Gets or sets the allowed file extensions.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileDataSource.LibraryName">
            <summary>
            Gets or sets the source filter name.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileDataSource.ShowGroupFiles">
            <summary>
            Indicates if the group files should be included.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileDataSource.GroupID">
            <summary>
            Gets or set the group id (for permission checking).
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileDataSource.CheckPermissions">
            <summary>
            Gets or sets if user permissions to file should be checked.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileDataSource.DataSource">
            <summary>
            Gets Datasource object.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileDataSource.CacheItemName">
            <summary>
            Name of the cache item the control will use.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaFileInfo">
            <summary>
            Media file info data container class.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaFileInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.CheckUniqueCodeName">
            <summary>
            Checks if the object has unique code name. Returns true if the object has unique code name.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.GetPhysicalFiles(CMS.SettingsProvider.OperationTypeEnum,System.Boolean)">
            <summary>
            Gets media files physical files.
            </summary>
            <param name="operationType">Operation type</param>
            <param name="binaryData">If true, gets the binary data to the DataSet</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.UpdatePhysicalFiles(System.Data.DataSet)">
            <summary>
            Saves media file physical files.
            </summary>
            <param name="dsFilesData">DataSet with physical files data</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.#ctor">
            <summary>
            Constructor - Creates an empty MediaFileInfo object.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.#ctor(CMS.DataEngine.IDataClass)">
            <summary>
            Constructor - Creates a new MediaFileInfo object from the given Data class.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MediaFileInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.#ctor(System.Web.HttpPostedFile,System.Int32)">
            <summary>
            Constructor - creates a new MediaFileInfo object from posted file.
            </summary>
            <param name="postedFile">Posted file</param>
            <param name="libraryId">ID of the library the file will be assigned to</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.#ctor(System.Web.HttpPostedFile,System.Int32,System.String)">
            <summary>
            Constructor - creates a new MediaFileInfo object from posted file.
            </summary>
            <param name="postedFile">Posted file</param>
            <param name="libraryId">ID of the library the file will be assigned to</param>
            <param name="librarySubfolder">Library subfolder path where file should be saved</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.#ctor(System.Web.HttpPostedFile,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor - creates a new MediaFileInfo object from posted file.
            </summary>
            <param name="postedFile">Posted file</param>
            <param name="libraryId">ID of the library the file will be assigned to</param>
            <param name="librarySubfolder">Library subfolder path where file should be saved</param>
            <param name="height">Height of the image</param>
            <param name="maxSideSize">Max side size of the image</param>
            <param name="width">Width of the image</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.#ctor(System.Web.HttpPostedFile,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor - creates a new MediaFileInfo object from posted file.
            </summary>
            <param name="postedFile">Posted file</param>
            <param name="libraryId">ID of the library the file will be assigned to</param>
            <param name="librarySubfolder">Library subfolder path where file should be saved</param>
            <param name="height">Height of the image</param>
            <param name="maxSideSize">Max side size of the image</param>
            <param name="width">Width of the image</param>
            <param name="siteId">ID of the site new media file is related to</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.#ctor(System.String,System.Int32)">
            <summary>
            Constructor - creates a new MediaFileInfo object specified by its file physical path.
            </summary>
            <param name="path">File physical path</param>
            <param name="libraryId">ID of the library the file will be assigned to</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructor - creates a new MediaFileInfo object specified by its file physical path.
            </summary>
            <param name="path">File physical path</param>
            <param name="libraryId">ID of the library the file will be assigned to</param>
            <param name="librarySubfolder">Library subfolder path where file should be saved</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.#ctor(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor - creates a new MediaFileInfo object specified by its file physical path.
            </summary>
            <param name="path">File physical path</param>
            <param name="libraryId">ID of the library the file will be assigned to</param>
            <param name="librarySubfolder">Library subfolder path where file should be saved</param>
            <param name="width">Width of the image</param>
            <param name="height">Height of the image</param>
            <param name="maxSideSize">Max side size of the image</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.Clone(System.Boolean)">
            <summary>
            Creates a clone of the object
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfo.CheckPermissions(CMS.SettingsProvider.PermissionsEnum,System.String,CMS.SettingsProvider.IUserInfo)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileCustomData">
            <summary>
            File custom data.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileBinary">
            <summary>
            MediaFile binary - for file information transfer purposes, not saved to the database.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileBinaryStream">
            <summary>
            MediaFile binary stream - for file information transfer purposes, not saved to the database.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileExtension">
            <summary>
            File extension.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileLibraryID">
            <summary>
            File library ID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileGUID">
            <summary>
            File GUID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileModifiedWhen">
            <summary>
            Date and time when the file was last modified.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileModifiedByUserID">
            <summary>
            ID of user who last modified current file.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileCreatedWhen">
            <summary>
            Date ant time when the file was created.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileCreatedByUserID">
            <summary>
            ID of user who created current file.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileID">
            <summary>
            File ID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileSize">
            <summary>
            File size.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileSiteID">
            <summary>
            File site ID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileImageWidth">
            <summary>
            File image width.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FilePath">
            <summary>
            File path.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileName">
            <summary>
            File name.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileTitle">
            <summary>
            File title.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileDescription">
            <summary>
            File description.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileMimeType">
            <summary>
            File mime type.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.FileImageHeight">
            <summary>
            File image height.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfo.SupportsVersioning">
            <summary>
            Indicates if the object versioning is supported.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaFileInfoProvider">
            <summary>
            Class providing media file info management.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaFileInfoProvider.mThumbnailQuality">
            <summary>
            Thumbnail quality.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaFileInfoProvider.ensureFileLock">
            <summary>
            Lock object for ensuring of the physical files.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaFileInfoProvider.mMaxStagingFileSize">
            <summary>
            Gets the maximal file size which is allowed for media files staging synchronization.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaFileInfoProvider.mMaxVersioningFileSize">
            <summary>
            Gets the maximal file size which is allowed for media files versioning.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFiles(System.String,System.String)">
            <summary>
            Returns data on files matching given criteria from database.
            </summary>
            <param name="orderBy">Order by statement to use</param>
            <param name="where">Where condition used to filter data</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFiles(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns dataset of files matching given criteria from database.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="orderBy">ORDER BY parameter</param>
            <param name="topN">TOP N parameter</param>
            <param name="columns">Selected columns</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileInfo(System.Int32)">
            <summary>
            Returns the MediaFileInfo structure for the specified media file.
            </summary>
            <param name="mediaFileId">Media file ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileInfo(System.Guid,System.String)">
            <summary>
            Returns media file with specified GUID.
            </summary>
            <param name="guid">Media file GUID</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileInfo(System.Int32,System.String)">
            <summary>
            Returns the MediaFileInfo structure for the specified media file.
            </summary>
            <param name="mediaLibraryId">Media library ID</param>
            <param name="mediaFilePath">File path</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileInfo(System.String,System.String)">
            <summary>
            Returns the MediaFileInfo structure for the specified media file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="mediaFilePath">File path</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileInfo(System.String,System.String,System.String)">
            <summary>
            Returns the MediaFileInfo structure for the specified media file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="mediaFilePath">File path</param>
            <param name="libraryFolder">Library folder name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.SetMediaFileInfo(CMS.MediaLibrary.MediaFileInfo)">
            <summary>
            Sets (updates or inserts) specified media file.
            </summary>
            <param name="mediaFile">Media file to set</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.SetMediaFileInfo(CMS.MediaLibrary.MediaFileInfo,System.Boolean)">
            <summary>
            Sets (updates or inserts) specified media file.
            </summary>
            <param name="mediaFile">Media file to set</param>
            <param name="ensureUniqueFileName">Indicates if unique file name should be ensured</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.SetMediaFileInfo(CMS.MediaLibrary.MediaFileInfo,System.Int32,System.Boolean)">
            <summary>
            Sets (updates or inserts) specified media file.
            </summary>
            <param name="mediaFile">Media file to set</param>
            <param name="userId">ID of the user performing set action</param>
            <param name="ensureUniqueFileName">Indicates if unique file name should be ensured</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.ImportMediaFileInfo(CMS.MediaLibrary.MediaFileInfo)">
            <summary>
            Import media file into database.
            </summary>
            <param name="mediaFile">Media file to import</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.ImportMediaFileInfo(CMS.MediaLibrary.MediaFileInfo,System.Int32)">
            <summary>
            Import media file into database.
            </summary>
            <param name="mediaFile">Media file to import</param>
            <param name="userId">ID of the user performing set action</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.DeleteMediaFileInfo(System.Int32)">
            <summary>
            Deletes specified media file.
            </summary>
            <param name="mediaFileId">Media file ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.DeleteMediaFileInfo(CMS.MediaLibrary.MediaFileInfo)">
            <summary>
            Deletes specified media file.
            </summary>
            <param name="infoObj">Media file object</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.DeleteMediaFile(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Deletes media file from filesystem.
            </summary>
            <param name="siteID">Site id</param>
            <param name="libraryID">Library id</param>
            <param name="filePath">Sub path to file</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.DeleteMediaFile(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes media file from filesystem.
            </summary>
            <param name="siteID">Site id</param>
            <param name="libraryID">Library id</param>
            <param name="filePath">Sub path to file</param>
            <param name="onlyFile">Indicates if only file should be deleted</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.DeleteMediaFilePreview(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Deletes media file preview from filesystem.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="filePath">File path</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.UpdateFilesPath(System.String,System.String,System.Int32)">
            <summary>
            Updates the file path of all the files matching specified criteria.
            </summary>
            <param name="libraryId">ID of the library where the files belongs to</param>
            <param name="newPath">New file path of the files</param>
            <param name="originalPath">Old file path of the files</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.DeleteMediaFiles(System.String,System.Int32)">
            <summary>
            Deletes file records of files matching specified criteria.
            </summary>
            <param name="path">Path of the files to delete</param>
            <param name="libraryId">ID of the library where the files belongs to</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetDependencyCacheKeys(CMS.MediaLibrary.MediaFileInfo,System.Boolean)">
            <summary>
            Gets the cache key dependencies array for the media file (cache item keys affected when the meta file changes).
            </summary>
            <param name="fi">File</param>
            <param name="preview">Indicates if preview cache key should be created</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.CanResizeImage(CMS.MediaLibrary.MediaFileInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether the image should be processed (resized) by the Image manager (if the destination size is smaller).
            </summary>
            <param name="fileInfo">Media file info to check</param>
            <param name="width">New width</param>
            <param name="height">New height</param>
            <param name="maxSideSize">Max side size</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.CanResizeImage(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether the image should be processed (resized) by the Image manager (if the destination size is smaller).
            </summary>
            <param name="filePath">File path</param>
            <param name="width">New width</param>
            <param name="height">New height</param>
            <param name="maxSideSize">Max side size</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.SaveFileToDisk(System.String,System.String,System.String,System.String,System.String,System.Guid,System.Object,System.Boolean)">
            <summary>
            Saves media file to disk and returns the applied file path.
            </summary>
            <param name="siteName">Name of the site of the media library</param>
            <param name="libraryFolder">Media library root folder</param>
            <param name="librarySubFolderPath">Subfolder path</param>
            <param name="fileName">Name of the file</param>
            <param name="fileExtension">Extension of the file</param>
            <param name="fileData">File data</param>
            <param name="fileGuid">File GUID</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.SaveFileToDisk(System.String,System.String,System.String,System.String,System.String,System.Guid,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Saves media file to disk and returns the applied file path.
            </summary>
            <param name="siteName">Name of the site of the media library</param>
            <param name="libraryFolder">Media library root folder</param>
            <param name="librarySubFolderPath">Subfolder path</param>
            <param name="fileName">Name of the file</param>
            <param name="fileExtension">Extension of the file</param>
            <param name="fileData">File data</param>
            <param name="fileGuid">File GUID</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
            <param name="ensureUniqueFileName">Indicates if unique file name should be ensured</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.SaveFileToDisk(System.String,System.String,System.String,System.String,System.String,System.Guid,System.Object,System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Saves media file to disk and returns the applied file path.
            </summary>
            <param name="siteName">Name of the site of the media library</param>
            <param name="libraryFolder">Media library root folder</param>
            <param name="librarySubFolderPath">Subfolder path</param>
            <param name="fileName">Name of the file</param>
            <param name="fileExtension">Extension of the file</param>
            <param name="fileData">File data</param>
            <param name="fileGuid">File GUID</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
            <param name="ensureUniqueFileName">Indicates if unique file name should be ensured</param>
            <param name="skipChecks">Skip check for file path and ensuring physical file path</param>
            <param name="fileSubFolderPath">File subfolder path</param>
            <param name="filePath">File path</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.CopyMediaFile(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Copy media file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="origPath">Old file path within the library folder</param>
            <param name="newPath">New file path within the library folder</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.CopyMediaFile(System.String,System.Int32,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Copy media file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="origPath">Old file path within the library folder</param>
            <param name="newPath">New file path within the library folder</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
            <param name="userId">ID of the user performing copy action</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.MoveMediaFile(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Moves media file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="origPath">Old file path within the library folder</param>
            <param name="newPath">New file path within the library folder</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFilePath(System.Int32,System.String)">
            <summary>
            Returns physical path to the media file.
            </summary>
            <param name="libraryId">Media library ID</param>
            <param name="filePath">File path</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFilePath(System.Int32,System.String,System.String)">
            <summary>
            Returns physical path to the media file.
            </summary>
            <param name="fileId">Media file ID</param>
            <param name="siteName">Site name</param>
            <param name="webFullPath">Physical path to the root of the web project (e.g. c:\WebProject\), if it is not specified web application physical path is used</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFilePath(CMS.MediaLibrary.MediaFileInfo,System.String,System.String)">
            <summary>
            Returns physical path to the media file.
            </summary>
            <param name="fileInfo">Media file info</param>
            <param name="siteName">Site name</param>
            <param name="webFullPath">Physical path to the root of the web project (e.g. c:\WebProject\), if it is not specified web application physical path is used</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFilePath(System.String,System.Int32,System.String,System.String)">
            <summary>
            Returns physical path to the given file path and library.
            </summary>
            <param name="filePath">Media file path</param>
            <param name="fileLibraryId">Library ID of the media file</param>
            <param name="siteName">Site name</param>
            <param name="webFullPath">Physical path to the root of the web project (e.g. c:\WebProject\), if it is not specified web application physical path is used</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFilePath(System.String,System.String,System.String)">
            <summary>
            Returns physical path to the media file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder name</param>
            <param name="filePath">File path within the library folder</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetThumbnailPath(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns physical path to the thumbnail.
            </summary>
            <param name="siteName">Site name of the site thumbnail is related to</param>
            <param name="fileName">File name of the file thumbnail is related to</param>
            <param name="fileExtension">Extension of the file thumbnail is related to</param>
            <param name="path">Path of the original file</param>
            <param name="width">Width of the thumbnail file</param>
            <param name="height">Height of the thumbnail file</param>
            <param name="addHiddenFolder">Indicates if hidden folder should be inserted into path</param>
            <param name="addFileExtension">Indicates if file extension should be inserted into thumbnail file name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetThumbnailPath(System.String,System.String,System.Int32)">
            <summary>
            Returns physical path to the thumbnail folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="filePath">File path from database</param>
            <param name="libraryId">Media libray ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetThumbnailPath(System.Int32,System.String)">
            <summary>
            Returns physical path to the thumbnail folder.
            </summary>
            <param name="libraryId">Media libray ID</param>
            <param name="filePath">File path from database</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetPreviewFilePath(System.String,System.String,System.Int32)">
            <summary>
            Returns preview file path for search pattern (.* as extension).
            </summary>
            <param name="filePath">File path from database</param>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetPreviewFilePath(CMS.MediaLibrary.MediaFileInfo)">
            <summary>
            Returns preview file path for media file info.
            If no preview found returns NULL
            </summary>
            <param name="fileInfo">Media file info</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileUrl(System.String,System.String,System.String)">
            <summary>
            Returns relative URL path to the media file, user permissions are not checked.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder name</param>
            <param name="filePath">File path within the library folder</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileUrl(System.Guid,System.String)">
            <summary>
            Returns relative URL path to the media file which is rewritten to calling GetMediaFile.aspx page where user permissions are checked.
            </summary>
            <param name="fileGuid">File GUID</param>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileAbsoluteUrl(System.String,System.String,System.String)">
            <summary>
            Returns absolute URL path to the media file including http://, user permissions are not checked
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder name</param>
            <param name="filePath">File path within the library folder</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileAbsoluteUrl(System.String,System.Guid,System.String)">
            <summary>
            Returns absolute URL path to the media file including http:// which is rewritten to calling GetMediaFile.aspx page where user permissions are checked
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileGuid">File GUID</param>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileAbsoluteUrl(System.Guid,System.String)">
            <summary>
            Returns absolute URL path for current domain to the media file including http:// which is rewritten to calling GetMediaFile.aspx page where user permissions are checked
            </summary>
            <param name="fileGuid">File GUID</param>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.EnsureThumbnailFile(CMS.MediaLibrary.MediaFileInfo,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Ensures the thumbnail file.
            </summary>
            <param name="fileInfo">File info</param>
            <param name="siteName">Site name</param>
            <param name="width">File width</param>
            <param name="height">File height</param>
            <param name="maxSideSize">Maximum side size</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.EnsureThumbnailFile(CMS.MediaLibrary.MediaFileInfo,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Ensures the thumbnail file.
            </summary>
            <param name="fileInfo">File info</param>
            <param name="siteName">Site name</param>
            <param name="width">File width</param>
            <param name="height">File height</param>
            <param name="maxSideSize">Maximum side size</param>
            <param name="usePreview">Use preview file</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetImageThumbnail(CMS.MediaLibrary.MediaFileInfo,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns image thumbnail from the disk or create a new one if doesn't exist yet.
            </summary>
            <param name="fileInfo">File info</param>
            <param name="libraryFolder">Library folder</param>
            <param name="siteName">Site name</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="maxSideSize">Maximum side size</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetFile(CMS.MediaLibrary.MediaFileInfo,System.String,System.String)">
            <summary>
            Returns the file from disk or (if not available on the disk) from database.
            </summary>
            <param name="fileInfo">File info</param>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.ShouldResize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if image should be scaled down.
            </summary>
            <param name="maxSideSize">Max side size</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="imageWidth">Image width</param>
            <param name="imageHeight">Image height</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetThumbnail(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns image thumbnail from the disk or create a new one if doesn't exist yet.
            </summary>
            <param name="originalFilePath">Original file path</param>
            <param name="originalWidth">Original width</param>
            <param name="originalHeight">Original height</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">MaxSideSize</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetFilePhysicalPath(System.String,System.String,System.String,System.String)">
            <summary>
            Returns physical path to the file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileName">File name</param>
            <param name="extension">File extension</param>
            <param name="path">File path</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.DeleteMediaFileThumbnails(CMS.MediaLibrary.MediaFileInfo)">
            <summary>
            Deletes media file thumbnails.
            </summary>
            <param name="fileInfo">File info</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.DeleteMediaFilePreviewThumbnails(CMS.MediaLibrary.MediaFileInfo)">
            <summary>
            Deletes media file preview thumbnails.
            </summary>
            <param name="fileInfo">File info</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFilesInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns dataset of files matching given criteria from database.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="orderBy">ORDER BY parameter</param>
            <param name="topN">TOP N parameter</param>
            <param name="columns">Selected columns</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileInfoInternal(System.Int32)">
            <summary>
            Returns the MediaFileInfo structure for the specified media file.
            </summary>
            <param name="mediaFileId">Media file ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileInfoInternal(System.Guid,System.String)">
            <summary>
            Returns media file with specified GUID.
            </summary>
            <param name="guid">Media file GUID</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileInfoInternal(System.Int32,System.String)">
            <summary>
            Returns the MediaFileInfo structure for the specified media file.
            </summary>
            <param name="mediaLibraryId">Media library ID</param>
            <param name="mediaFilePath">File path</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.GetMediaFileInfoInternal(System.String,System.String,System.String)">
            <summary>
            Returns the MediaFileInfo structure for the specified media file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="mediaFilePath">File path</param>
            <param name="libraryFolder">Library folder name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.SetMediaFileInfoInternal(CMS.MediaLibrary.MediaFileInfo,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Sets MediaFileInfo internal.
            </summary>
            <param name="mediaFile">Media file info</param>
            <param name="saveFileToDisk">Save file to disk</param>
            <param name="userId">ID of the user performing set action</param>
            <param name="ensureUniqueFileName">Indicates if unique file name should be ensured</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.UpdateFilesPathInternal(System.String,System.String,System.Int32)">
            <summary>
            Updates the file path of all the files matching specified criteria.
            </summary>
            <param name="libraryId">ID of the library where the files belongs to</param>
            <param name="newPath">New file path of the files</param>
            <param name="originalPath">Old file path of the files</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaFileInfoProvider.CheckAndEnsureFilePath(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Saves media file to disk and returns the applied file path.
            </summary>
            <param name="siteName">Name of the site of the media library</param>
            <param name="libraryFolder">Media library root folder</param>
            <param name="librarySubFolderPath">Subfolder path</param>
            <param name="fileName">Name of the file</param>
            <param name="fileExtension">Extension of the file</param>
            <param name="ensureUniqueFileName">Indicates if unique file name should be ensured</param>
            <param name="filePath">New file path</param>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfoProvider.ThumbnailQuality">
            <summary>
            Thumbnail quality.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfoProvider.MaxStagingFileSize">
            <summary>
            Gets the maximal file size in bytes which is allowed for media files staging synchronization.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFileInfoProvider.MaxVersioningFileSize">
            <summary>
            Gets the maximal file size in bytes which is allowed for media files versioning.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaFilePreview">
            <summary>
            Media file preview class.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFilePreview.PreviewSuffix">
            <summary>
            Preview preffix for identification preview file.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFilePreview.IconSet">
            <summary>
            Icon set name.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFilePreview.DisplayActiveContent">
            <summary>
            Indicates if active content (video, flash etc.) should be displayed.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaFilePreview.UseSecureLinks">
            <summary>
            Indicates whether the links to media file should be processed in a secure way.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaHelper">
            <summary>
            Class providing media library helper methods.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaLibraryHelper">
            <summary>
            Class providing helper methods for media library.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.EnsurePath(System.String)">
            <summary>
            Return file path with replaced back slash ("\") to slash ("/").
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.EnsurePhysicalPath(System.String)">
            <summary>
            Return file path with replaced slash ("/") to back slash ("\").
            </summary>
            <param name="path">File path</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.EnsureUniqueDirectory(System.String)">
            <summary>
            Ensures unique path for the specified directory. If the directory with the specified name already exist in the target location 
            new path with the added suffix is returned. The suffix consist of '_' sign and the number.
            </summary>
            <param name="path">Directory path to ensure</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.EnsureUniqueFileName(System.String)">
            <summary>
            Ensures unique path for the specified file. If the directory with the specified name already exist in the target location 
            new path with the added suffix is returned. The suffix consist of '_' sign and the number.
            </summary>
            <param name="path">Complete path to the file to ensure</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetMediaFilePreviewSuffix(System.String)">
            <summary>
            Returns media file praview suffix from settings.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetMediaFileHiddenFolder(System.String)">
            <summary>
            Returns media file hidden folder name from settings.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetMediaLibrariesFolder(System.String)">
            <summary>
            Returns root folder from settings where all media libraries are stored.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.IsExternalLibrary(System.String)">
            <summary>
            Returns true if media library root folder is outside of CMS.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetPreviewFileName(System.String,System.String,System.String,System.String)">
            <summary>
            Returns media file preview file name.
            </summary>
            <param name="fileName">File name</param>
            <param name="fileExtension">File extension</param>
            <param name="previewExtension">File preview extension</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetPreviewFileName(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns media file preview file name.
            </summary>
            <param name="fileName">File name</param>
            <param name="fileExtension">File extension</param>
            <param name="previewExtension">File preview extension</param>
            <param name="siteName">Site name</param>
            <param name="previewSuffix">Preview suffix</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetPreviewFilePath(CMS.MediaLibrary.MediaFileInfo)">
            <summary>
            Returns media file preview file path.
            </summary>
            <param name="fileInfo">Media file info</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.MoveMediaFilePreview(CMS.MediaLibrary.MediaFileInfo,System.String)">
            <summary>
            Moves preview file into new location according new media file name.
            </summary>
            <param name="fileInfo">Media file info</param>
            <param name="newName">New media file path</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.IsAudio(System.String)">
            <summary>
            Returns true if is known audio extension.
            </summary>
            <param name="fileExtension">File extension</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.IsVideo(System.String)">
            <summary>
            Returns true if is known video extension.
            </summary>
            <param name="fileExtension">File extension</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetFlash(System.String,System.Int32,System.Int32)">
            <summary>
            Returns flash html code.
            </summary>
            <param name="url">URL path to swf file</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetVideo(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Returns video html code.
            </summary>
            <param name="url">File Url</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="extension">Extension</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetAudio(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Returns audio html code.
            </summary>
            <param name="url">File URL</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="extension">File extension</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Returns image html code.
            </summary>
            <param name="url">Image url</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">Max side size</param>
            <param name="origWidth">Original image width</param>
            <param name="origHeight">Original image height</param>
            <param name="description">Image description</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.ShowPreviewOrIcon(CMS.MediaLibrary.MediaFileInfo,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Web.UI.Page)">
            <summary>
            Show preview file if exists or file icon.
            </summary>
            <param name="fileInfo">Media file info</param>
            <param name="width">Width of preview to display</param>
            <param name="height">Height of preview to display</param>
            <param name="maxSideSize">Max side size of preview to display</param>
            <param name="previewSuffix">Media file preview suffix</param>
            <param name="iconSet">Name of the subfolder where icon images are located</param>
            <param name="page">Page</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.ShowPreviewOrIcon(CMS.MediaLibrary.MediaFileInfo,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Web.UI.Page,System.String)">
            <summary>
            Show preview file if exists or file icon.
            </summary>
            <param name="fileInfo">Media file info</param>
            <param name="width">Width of preview to display</param>
            <param name="height">Height of preview to display</param>
            <param name="maxSideSize">Max side size of preview to display</param>
            <param name="previewSuffix">Media file preview suffix</param>
            <param name="iconSet">Name of the subfolder where icon images are located</param>
            <param name="page">Page</param>
            <param name="defaultImageUrl">Default teaser image</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.CopyRecursive(System.Int32,CMS.IO.DirectoryInfo,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Recursive copy media library directory.
            </summary>
            <param name="libraryID">Library ID</param>
            <param name="dir">Directory Info</param>
            <param name="destinationDirectory">Destination path</param>
            <param name="sourcePath">Source DB path</param>
            <param name="libraryPathIndex">Library path index</param>
            <param name="startingPoint">Starting point</param>
            <param name="copyDB">Indicate if database entries should copy</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.CopyRecursive(System.Int32,CMS.IO.DirectoryInfo,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Recursive copy media library directory.
            </summary>
            <param name="libraryID">Library ID</param>
            <param name="dir">Directory Info</param>
            <param name="destinationDirectory">Destination path</param>
            <param name="sourcePath">Source DB path</param>
            <param name="libraryPathIndex">Library path index</param>
            <param name="startingPoint">Starting point</param>
            <param name="copyDB">Indicate if database entries should copy</param>
            <param name="userId">ID of the user performing action</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.HasPreview(System.String,System.Int32,System.String)">
            <summary>
            Returns true if file has preview file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="filePath">File path within library</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.CheckFilePermissions(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Check file permissions.
            </summary>
            <param name="path">File path</param>
            <param name="checkRead">If read permissions should be checked</param>
            <param name="checkWrite">If write permissions should be checked</param>
            <param name="checkModify">If modify permissions should be checked</param>
            <param name="checkDelete">If delete permissions should be checked</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetMediaRootFolderPath(System.String)">
            <summary>
            Returns physical path to the directory where all media libraries are stored.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetMediaRootFolderPath(System.String,System.String)">
            <summary>
            Returns physical path to the directory where all media libraries are stored.
            </summary>
            <param name="siteName">Site name</param>
            <param name="webFullPath">Physical path to the root of the web project (e.g. c:\WebProject\), if it is not specified web application physical path is used</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetAllowedExtensions(System.String)">
            <summary>
            Returns allowed extensions list from settings.
            </summary>
            <param name="siteName">Name of the site</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.IsExtensionAllowed(System.String)">
            <summary>
            Determines whether the file with the specified extension (case insensitive) can be uploaded into library module on current site.
            </summary>
            <param name="extension">File extension to check</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.IsExtensionAllowed(System.String,System.String)">
            <summary>
            Determines whether the file with the specified extension (case insensitive) can be uploaded into library module on site specified by name.
            </summary>
            <param name="extension">File extension to check</param>
            <param name="siteName">File extension to check</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetPermissionMatrix(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.ArrayList)">
            <summary>
            Returns the permission matrix for the specified media library.
            </summary>
            <param name="libraryId">Library ID</param>
            <param name="librarySiteId">Library site ID</param>
            <param name="libraryGroupId">Library group ID</param>
            <param name="resourceId">Media library resource ID</param>
            <param name="permissionsArray">Array of permissions</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetAccessDeniedMessage(System.String)">
            <summary>
            Returns access dednied message for specified permission.
            </summary>
            <param name="permissionName">Permission name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetMediaSource(System.Guid,System.String)">
            <summary>
            Returns MediaSource for given media file.
            </summary>
            <param name="fileGuid">Media file GUID</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetMediaSource(System.String,System.String,System.String)">
            <summary>
            Returns MediaSource for given media file.
            </summary>
            <param name="filePath">Media file path</param>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetMediaFileUrl(System.String,System.String)">
            <summary>
            Returns media file url according to site settings.
            </summary>
            <param name="fileGuid">Media file guid</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetMediaSource(CMS.MediaLibrary.MediaFileInfo)">
            <summary>
            Returns MediaSource for given media file.
            </summary>
            <param name="mfi">Media file data</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.Contains(System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Test if the right exists within the given rights.
            </summary>
            <param name="right">Right to check</param>
            <param name="rule">File access rule</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.LogSynchronization(System.String,System.Int32,System.String,System.String,CMS.SettingsProvider.TaskTypeEnum,System.Boolean)">
            <summary>
            Logs the synchronization task for media folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryId">Library ID</param>
            <param name="sourcePath">Source path</param>
            <param name="targetPath">Target path</param>
            <param name="taskType">Task type</param>
            <param name="runAsync">Indicates if the logging should run asynchronously</param>
            <returns>Returns new synchronization task</returns>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.LogSynchronization(System.String,System.Int32,System.String,System.String,CMS.SettingsProvider.TaskTypeEnum,System.Int32)">
            <summary>
            Logs the synchronization task for media folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryId">Library ID</param>
            <param name="sourcePath">Source path</param>
            <param name="targetPath">Target path</param>
            <param name="taskType">Task type</param>
            <param name="serverId">Server ID to synchronize</param>
            <returns>Returns new synchronization task</returns>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.LogSynchronization(System.String,System.Int32,System.String,System.String,CMS.SettingsProvider.TaskTypeEnum,System.Int32,System.Boolean)">
            <summary>
            Logs the synchronization task for media folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryId">Library ID</param>
            <param name="sourcePath">Source path</param>
            <param name="targetPath">Target path</param>
            <param name="taskType">Task type</param>
            <param name="serverId">Server ID to synchronize</param>
            <param name="runAsync">Indicates if the logging should run asynchronously</param>
            <returns>Returns new synchronization task</returns>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetFolderDataSet">
            <summary>
            Gets media folder empty DataSet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryHelper.GetTaskTitle(CMS.SettingsProvider.TaskTypeEnum,System.String,System.String,CMS.MediaLibrary.MediaLibraryInfo)">
            <summary>
            Gets task title.
            </summary>
            <param name="taskType">Task type</param>
            <param name="sourcePath">Source path</param>
            <param name="targetPath">Target path</param>
            <param name="library">Media library</param>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryHelper.SuffixRegex">
            <summary>
            Seffix regex for files and folders.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryHelper.MediaLibraryCustomPath">
            <summary>
            Custom path to media library.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaLibraryContext">
            <summary>
            Class representing media library in the current context.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryContext.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryContext.GetCurrentMediaLibrary">
            <summary>
            Returns information on the current media library according the library ID/ library GUID/ library name specified as an URL parameter of the current request
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryContext.GetCurrentMediaFile">
            <summary>
            Returns information on the current media file according the fileid or fileguid 
            specified as an URL parameter of the current request
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryContext.GetProperty(System.String)">
            <summary>
            Gets the context property.
            </summary>
            <param name="name">Property name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryContext.SetProperty(System.String,System.Object)">
            <summary>
            Sets the context property.
            </summary>
            <param name="name">Property name</param>
            <param name="value">New value</param>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryContext.ContextObject">
            <summary>
            Context object.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryContext.Properties">
            <summary>
            Properties available through the context.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryContext.CurrentMediaLibrary">
            <summary>
            Current media library info object matching libraryid, libraryguid or libraryname 
            specified in the URL parameter of the current request
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryContext.CurrentMediaFile">
            <summary>
            Current media file info object matching fileid or fileguid specified in the URL parameter of the current request.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaLibraryInfo">
            <summary>
            Media library info data container class.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryInfo.TYPEINFOGROUP">
            <summary>
            Type information for group library.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfo.#ctor">
            <summary>
            Constructor - Creates an empty MediaLibraryInfo object.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MediaLibraryInfo object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibraryFullName">
            <summary>
            Media library full name in format [sitename].[libraryname].
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibraryGroupID">
            <summary>
            Library group ID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibraryDescription">
            <summary>
            Library description.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibrarySiteID">
            <summary>
            Library site ID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibraryFolder">
            <summary>
            Library folder.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibraryName">
            <summary>
            Library name.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibraryDisplayName">
            <summary>
            Library display name.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibraryGUID">
            <summary>
            Library GUID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibraryID">
            <summary>
            Library ID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibraryAccess">
            <summary>
            Library access.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibraryLastModified">
            <summary>
            Library last modified.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.FileCreate">
            <summary>
            Indicates whether the file creating is allowed.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.FileDelete">
            <summary>
            Indicates whether the file deleting is allowed.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.FileModify">
            <summary>
            Indicates whether the file modifying is allowed.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.FolderCreate">
            <summary>
            Indicates whether the folder creating is allowed.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.FolderDelete">
            <summary>
            Indicates whether the folder deleting is allowed.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.FolderModify">
            <summary>
            Indicates whether the folder modifying is allowed.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.Access">
            <summary>
            Indicates whether the access to library is allowed.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.LibraryTeaserPath">
            <summary>
            Library teaser path.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaLibraryInfoProvider">
            <summary>
            Class providing media library info management.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryInfoProvider.CURRENT_LIBRARY">
            <summary>
            Current media library.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryInfoProvider.mediaLibrariesById">
            <summary>
            Hashtable indexed by LibraryID.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryInfoProvider.mediaLibrariesByName">
            <summary>
            Hashtable indexed by full library name in format [SiteName].[LibraryName].
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryInfoProvider.mDeletePhysicalFiles">
            <summary>
            Indicates if media files physical files should be deleted.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryInfoProvider.tableLock">
            <summary>
            Table lock for loading.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetKey(System.String,System.Int32,System.Int32)">
            <summary>
            Gets hashtable key.
            </summary>
            <param name="libraryName">Library name</param>
            <param name="librarySiteId">Library site ID</param>
            <param name="libraryGroupId">Library group ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.LoadLibraries">
            <summary>
            Load libraries data into hashtables.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.Clear(System.Boolean)">
            <summary>
            Clears the hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraryInfoFromDB(System.Int32)">
            <summary>
            Returns the MediaLibraryInfo structure for the specified media library.
            </summary>
            <param name="mediaLibraryId">MediaLibrary id</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraryInfoFromDB(System.String,System.Int32,System.Int32)">
            <summary>
            Rerurns media library info specified by library name, site ID and group ID directly from DB.
            </summary>
            <param name="libraryName">Library name</param>
            <param name="siteId">Library Site ID</param>
            <param name="groupId">Library Group ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraryInfoFromDB(System.String,System.String)">
            <summary>
            Rerurns media library info specified by library name and site name directly from DB.
            </summary>
            <param name="libraryName">Library name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraries(System.String,System.String)">
            <summary>
            Returns information on libraries matching specified criteria.
            </summary>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement to use</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraries(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns information on libraries matching specified criteria.
            </summary>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement to use</param>
            <param name="topN">Top N records</param>
            <param name="columns">List of columns to be returned</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraryInfo(System.String,System.String)">
            <summary>
            Returns media library info specified by library name and site name.
            </summary>
            <param name="libraryName">Library name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraryInfo(System.String,System.Int32,System.Int32)">
            <summary>
            Returns media library info specified by library name, site name and groupId.
            </summary>
            <param name="libraryName">Library name</param>
            <param name="siteId">Site ID</param>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraryInfo(System.Int32)">
            <summary>
            Returns the MediaLibraryInfo structure for the specified media library.
            </summary>
            <param name="mediaLibraryId">MediaLibrary id</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.SetMediaLibraryInfo(CMS.MediaLibrary.MediaLibraryInfo)">
            <summary>
            Sets (updates or inserts) specified media library.
            </summary>
            <param name="mediaLibrary">MediaLibrary to set</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.DeleteMediaLibraryInfo(CMS.MediaLibrary.MediaLibraryInfo)">
            <summary>
            Deletes specified media library.
            </summary>
            <param name="infoObj">MediaLibrary object</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.DeleteMediaLibraryInfo(System.Int32)">
            <summary>
            Deletes specified media library.
            </summary>
            <param name="mediaLibraryId">Media library id</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.DeleteMediaLibrariesInfos(System.Int32)">
            <summary>
            Delete media libraries only from database for selected group.
            </summary>
            <param name="groupId">Group ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.CombineSecurityWhereCondition(System.String,System.Int32)">
            <summary>
            Add security where condition to the existing where condition.
            </summary>
            <param name="where">Existing where condition</param>
            <param name="communityGroupId">Community group ID</param>
            <returns>Returns where condition</returns>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.RemoveObjectDependencies(CMS.MediaLibrary.MediaLibraryInfo)">
            <summary>
            Removes library dependencies.
            </summary>
            <param name="infoObj">MediaLibrary object</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.IsUserAuthorizedPerLibrary(CMS.MediaLibrary.MediaLibraryInfo,System.String)">
            <summary>
            Returns True if current user is granted with specified media library permission, otherwise returns False.
            </summary>
            <param name="libraryInfo">Media library data</param>
            <param name="permission">Permission code name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.IsUserAuthorizedPerLibrary(CMS.MediaLibrary.MediaLibraryInfo,System.String,CMS.CMSHelper.CurrentUserInfo)">
            <summary>
            Returns True if current user is granted with specified media library permission, otherwise returns False.
            </summary>
            <param name="libraryInfo">Media library data</param>
            <param name="permission">Permission code name</param>
            <param name="userInfo">User to check</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.CheckResourcePermission(System.Int32,System.String,CMS.CMSHelper.CurrentUserInfo)">
            <summary>
            Checks the specified permission for resource (cms.groups if library group id is specified, cms.medialibrary otherwise).
            </summary>
            <param name="libraryGroupId">ID of the library group</param>
            <param name="permissionName">Name of the permission</param>
            <param name="userInfo">User info to check</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.CheckPermission(System.Int32,System.Int32,System.String,CMS.GlobalHelper.SecurityAccessEnum,CMS.SiteProvider.UserInfo)">
            <summary>
            Checks specified media library permission.
            </summary>
            <param name="libraryId">Media library ID</param>
            <param name="libraryGroupId">Media library group ID</param>
            <param name="permissionName">Name of the permission which is checked</param>
            <param name="permissionValue">Value of the permission</param>
            <param name="userInfo">User info to check</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.IsAuthorizedPerLibrary(System.Int32,System.String,System.Int32)">
            <summary>
            Returns true if the user is authorized per given library.
            </summary>
            <param name="mediaLibraryId">Library ID</param>
            <param name="permissionName">Permission name</param>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraryFolderPath(System.String,System.String)">
            <summary>
            Returns physical path to the specified library folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder name</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraryFolderPath(System.Int32)">
            <summary>
            Returns physical path to the specified library.
            </summary>
            <param name="libraryID">Library ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraryFolderPath(System.Int32,System.String)">
            <summary>
            Returns physical path to the specified library.
            </summary>
            <param name="libraryID">Library ID</param>
            <param name="webFullPath">Physical path to the root of the web project (e.g. c:\WebProject\), if it is not specified web application physical path is used</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraryFolderPath(System.Int32,System.String,System.String)">
            <summary>
            Returns physical path to the specified library.
            </summary>
            <param name="libraryID">Library ID</param>
            <param name="siteName">Site name</param>
            <param name="webFullPath">Physical path to the root of the web project (e.g. c:\WebProject\), if it is not specified web application physical path is used</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraryFolderPath(System.String,System.String,System.String)">
            <summary>
            Returns physical path to the specified library folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryFolder">Library folder name</param>
            <param name="webFullPath">Physical path to the root of the web project (e.g. c:\WebProject\), if it is not specified web application physical path is used</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.DeleteMediaLibraryFolder(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Delete folder from media library.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Media library ID</param>
            <param name="folderPath">Path to the folder within the library</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.DeleteMediaLibraryFolder(System.String,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Delete folder from media library.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Media library ID</param>
            <param name="folderPath">Path to the folder within the library</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
            <param name="logSynchronization">Indicates if staging task should be logged</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.DeleteMediaLibraryFolder(System.String,System.String,System.Boolean)">
            <summary>
            Delete media library root folder from media root directory.
            ~/[site name]/media/
            </summary>
            <param name="siteName">Site name</param>
            <param name="folder">Media library folder</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.DeleteMediaLibraryFolder(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Delete media library root folder from media root directory.
            ~/[site name]/media/
            </summary>
            <param name="siteName">Site name</param>
            <param name="folder">Media library folder</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
            <param name="logSynchronization">Indicates if staging task should be logged</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.DeleteMediaLibrariesFolders(System.String,System.Collections.ArrayList)">
            <summary>
            Delete all media libraries folders.
            </summary>
            <param name="sitename">Site name</param>
            <param name="folders">List of folder to delete</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.CreateMediaLibraryFolder(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Creates folder within specified library.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="newFolderPath">New folder path</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.CreateMediaLibraryFolder(System.String,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates folder within specified library.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="newFolderPath">New folder path</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
            <param name="logSynchronization">Indicates if staging task should be logged</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.RenameMediaLibraryFolder(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Rename folder within specified library.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="folderPath">Original folder path</param>
            <param name="newFolderPath">New folder path</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.RenameMediaLibraryFolder(System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Rename folder within specified library.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="folderPath">Original folder path</param>
            <param name="newFolderPath">New folder path</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
            <param name="logSynchronization">Indicates if staging task should be logged</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.CopyMediaLibraryFolder(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Copy media library folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="origPath">Old folder path within the library folder</param>
            <param name="newPath">New folder path within the library folder</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.CopyMediaLibraryFolder(System.String,System.Int32,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Copy media library folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="origPath">Old folder path within the library folder</param>
            <param name="newPath">New folder path within the library folder</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
            <param name="userId">ID of the user performing the action</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.CopyMediaLibraryFolder(System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copy media library folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="origPath">Old folder path within the library folder</param>
            <param name="newPath">New folder path within the library folder</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
            <param name="logSynchronization">Indicates if staging task should be logged</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.CopyMediaLibraryFolder(System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Copy media library folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="origPath">Old folder path within the library folder</param>
            <param name="newPath">New folder path within the library folder</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
            <param name="logSynchronization">Indicates if staging task should be logged</param>
            <param name="userId">ID of the user performing the action</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.MoveMediaLibraryFolder(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Moves media library folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="origPath">Old folder path within the library folder</param>
            <param name="newPath">New folder path within the library folder</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryInfoProvider.MoveMediaLibraryFolder(System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Moves media library folder.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="origPath">Old folder path within the library folder</param>
            <param name="newPath">New folder path within the library folder</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
            <param name="logSynchronization">Indicates if staging task should be logged</param>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryInfoProvider.DeletePhysicalFiles">
            <summary>
            Indicates if media files physical files should be deleted.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaLibraryObjectType">
            <summary>
            Media library object types.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryObjectType.MEDIALIBRARY">
            <summary>
            Code name for media library.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryObjectType.MEDIAFILE">
            <summary>
            Code name for media file.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryObjectType.MEDIAFOLDER">
            <summary>
            Code name for abstract media folder.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryObjectType.MEDIALIBRARYROLEPERMISSION">
            <summary>
            Code name for library role permission.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryObjectType.GetObject(System.Data.DataRow,System.String)">
            <summary>
            Gets the object created from the given DataRow.
            </summary>
            <param name="objectRow">Object DataRow</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="T:CMS.MediaLibrary.MediaLibraryRolePermissionInfo">
            <summary>
            Media library role permission data container class.
            </summary>
        </member>
        <member name="F:CMS.MediaLibrary.MediaLibraryRolePermissionInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfo.#ctor">
            <summary>
            Constructor - Creates an empty MediaLibraryRolePermission object.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MediaLibraryRolePermission object from the given DataRow.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryRolePermissionInfo.LibraryID">
            <summary>
            Library ID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryRolePermissionInfo.RoleID">
            <summary>
            Role ID.
            </summary>
        </member>
        <member name="P:CMS.MediaLibrary.MediaLibraryRolePermissionInfo.PermissionID">
            <summary>
            Permission ID.
            </summary>
        </member>
        <member name="T:CMS.MediaLibrary.MediaLibraryRolePermissionInfoProvider">
            <summary>
            Class providing media library role permission management.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfoProvider.GetLibraryRolePermissions(System.String,System.String)">
            <summary>
            Returns the media library role permission data matching specified criteria.
            </summary>
            <param name="where">Where condition used to filter the data</param>
            <param name="orderBy">Order by statement to use</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfoProvider.GetMediaLibraryRolePermissionInfo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the media library role permission structure matching specified criteria.
            </summary>
            <param name="libraryId">ID of the library</param>
            <param name="roleId">ID of the role</param>
            <param name="permissionId">ID of the permission</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfoProvider.SetMediaLibraryRolePermissionInfo(CMS.MediaLibrary.MediaLibraryRolePermissionInfo)">
            <summary>
            Sets (updates or inserts) specified library role permission.
            </summary>
            <param name="libraryRolePermission">Library role permission to set</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfoProvider.DeleteMediaLibraryRolePermissionInfo(CMS.MediaLibrary.MediaLibraryRolePermissionInfo)">
            <summary>
            Deletes specified media library role permission.
            </summary>
            <param name="infoObj">Media library role permission object</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfoProvider.AddRoleToLibrary(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds specified role to the library.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="libraryId">Library ID</param>
            <param name="permissionId">Permission ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfoProvider.RemoveRoleFromLibrary(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes specified library role.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="libraryId">Library ID</param>
            <param name="permissionId">Permission ID</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfoProvider.DeleteAllRoles(System.String)">
            <summary>
            Delete all media library roles.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryRolePermissionInfoProvider.SetPermissions(System.Int32,System.String,System.String)">
            <summary>
            Sets permissions for list of roles.
            </summary>
            <param name="libraryId">Media library ID</param>
            <param name="roleIds">List of role IDs separated by semicolon</param>
            <param name="permissionsIds">List of permisson IDs separated by semicolon</param>
        </member>
        <member name="T:CMS.MediaLibrary.MediaLibraryModule">
            <summary>
            Module registration.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryModule.#ctor(CMS.SettingsProvider.ModuleInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Module info</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryModule.GetObject(System.Data.DataRow,System.String)">
            <summary>
            Gets the object created from the given DataRow.
            </summary>
            <param name="objectRow">Object DataRow</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryModule.ProcessCommand(System.String,System.Object[])">
            <summary>
            Processes the specified command.
            </summary>
            <param name="commandName">Command name</param>
            <param name="parameters">Command parameters</param>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryModule.GetContexts">
            <summary>
            Returns media library context collection.
            </summary>
        </member>
        <member name="M:CMS.MediaLibrary.MediaLibraryModule.ClearHashtables(System.Boolean)">
            <summary>
            Clears the module hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
    </members>
</doc>
